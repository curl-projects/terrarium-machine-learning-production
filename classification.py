"""
Goal: generate a web endpoint that runs classification tasks on input data when it's called.

- Implement a functional system which updates a binary flag in the database when the processing is complete that the
frontend listens for and updates the UI in response to.

"""

import modal
from pydantic import BaseModel
from fastapi.responses import HTMLResponse
from typing import Dict

stub = modal.Stub("terrarium-machine-learning")

pinecone_image = modal.Image.debian_slim().pip_install("pinecone-client")

@stub.function(image=pinecone_image)
def load_vectors(search_vector: str):
    """
    Loads vectors using search vector from front-end client
    """
    import pinecone

    return "Vectors Loaded"

machine_learning_image = (
    modal.Image.from_dockerhub("huanjason/scikit-learn")
         .pip_install("numpy", "pandas")
)

@stub.function(image=machine_learning_image)
def kmeans_classify(vector_matrix, token=""):
    """    
    Needs access to numpy, pandas and sklearn.

    Inputs
    ------
    vector_matrix: numpy matrix of dimension (number_of_vectors * vector dimension)
    token: token for authentication; must match modal secret

    Outputs
    -------
    labels: a dictionary that maps feature requests to a cluster for a specific feature
    

    """
    import numpy as np
    import pandas as pd
    from sklearn.cluster import KMeans

    print("This code is running on a remote worker! The vector matrix is", vector_matrix)
    return "Hi"

@stub.function()
def label_post():
    """
    Needs access to prisma
    
    Inputs
    ------
    labels: a dictionary that maps feature requests to a cluster for a specific feature

    Outputs
    --------
    request_status: the status of the request
    """
    return "Posted"

@stub.function()
def generate_clusters(search_vector: str):
    """
    Inputs
    ------
    search_vector: the openAI search vector generated by the client
    """

# class ClusterData(BaseModel):
#     searchVector: str

@stub.function()
@modal.web_endpoint(method="POST")
def process_clusters(req_json: Dict):
    import json
    print("Hello")
    print("DATA:", json.loads(req_json))
    # print("SEARCH VECTOR:", cluster_data.searchVector)
    # return HTMLResponse(f"Search Vector {cluster_data.searchVector}")